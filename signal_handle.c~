#include "signal_handle.h"

/*
Function name: handle_sigint
Inputs: int sig - Signal number
Outputs: None
Description: This function handles the SIGINT (Ctrl-C) signal by 
printing a new prompt and doing nothing else.
*/
void handle_sigint(int sig) {
    // Does nothing and just return to the prompt when ctrl-c is pressed
  write(2, "\n", 2);
  write(2, "mysh$ ", 6);
  write(2, "\n", 2);
}

/*
Function name: signal_handler_setup
Inputs: struct sigaction *sa - Pointer to a sigaction struct
Outputs: None
Description: This function sets up the signal handler for SIGINT (Ctrl-C) 
by specifying the handler function, clearing the flag, 
and emptying the signal mask. It prints an error message and exits 
if the sigaction call fails.
NOTE: We only handled signal handling for sigint due to time constraint
*/
void signal_handler_setup(struct sigaction *sa){
  //Errors: when testing inf loop that it says "done
  //running in background" when it was never in background

  sa->sa_handler = handle_sigint;
  sa->sa_flags = 0; // No special flags
  sigemptyset(&sa->sa_mask); // No additional signals to block
  
  if (sigaction(SIGINT, sa, NULL) == -1) {
    perror("sigaction");
    exit(EXIT_FAILURE);
  }
}
